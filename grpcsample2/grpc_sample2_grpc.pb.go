// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcsample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrpcSample2Client is the client API for GrpcSample2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcSample2Client interface {
	Pong(ctx context.Context, in *PongOut, opts ...grpc.CallOption) (*PongOut, error)
}

type grpcSample2Client struct {
	cc grpc.ClientConnInterface
}

func NewGrpcSample2Client(cc grpc.ClientConnInterface) GrpcSample2Client {
	return &grpcSample2Client{cc}
}

func (c *grpcSample2Client) Pong(ctx context.Context, in *PongOut, opts ...grpc.CallOption) (*PongOut, error) {
	out := new(PongOut)
	err := c.cc.Invoke(ctx, "/grpcsample.GrpcSample2/Pong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcSample2Server is the server API for GrpcSample2 service.
// All implementations must embed UnimplementedGrpcSample2Server
// for forward compatibility
type GrpcSample2Server interface {
	Pong(context.Context, *PongOut) (*PongOut, error)
	mustEmbedUnimplementedGrpcSample2Server()
}

// UnimplementedGrpcSample2Server must be embedded to have forward compatible implementations.
type UnimplementedGrpcSample2Server struct {
}

func (*UnimplementedGrpcSample2Server) Pong(context.Context, *PongOut) (*PongOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pong not implemented")
}
func (*UnimplementedGrpcSample2Server) mustEmbedUnimplementedGrpcSample2Server() {}

func RegisterGrpcSample2Server(s *grpc.Server, srv GrpcSample2Server) {
	s.RegisterService(&_GrpcSample2_serviceDesc, srv)
}

func _GrpcSample2_Pong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PongOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcSample2Server).Pong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsample.GrpcSample2/Pong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcSample2Server).Pong(ctx, req.(*PongOut))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcSample2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcsample.GrpcSample2",
	HandlerType: (*GrpcSample2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pong",
			Handler:    _GrpcSample2_Pong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_sample2.proto",
}
